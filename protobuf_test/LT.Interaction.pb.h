// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LT.Interaction.proto

#ifndef PROTOBUF_LT_2eInteraction_2eproto__INCLUDED
#define PROTOBUF_LT_2eInteraction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_LT_2eInteraction_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsinteraction_TerminalInfoImpl();
void InitDefaultsinteraction_TerminalInfo();
void InitDefaultsinteraction_BaseStationInfoImpl();
void InitDefaultsinteraction_BaseStationInfo();
void InitDefaultsinteraction_BaseCommandInfoImpl();
void InitDefaultsinteraction_BaseCommandInfo();
void InitDefaultsinteraction_TermCommandInfoImpl();
void InitDefaultsinteraction_TermCommandInfo();
void InitDefaultsinteractionImpl();
void InitDefaultsinteraction();
inline void InitDefaults() {
  InitDefaultsinteraction_TerminalInfo();
  InitDefaultsinteraction_BaseStationInfo();
  InitDefaultsinteraction_BaseCommandInfo();
  InitDefaultsinteraction_TermCommandInfo();
  InitDefaultsinteraction();
}
}  // namespace protobuf_LT_2eInteraction_2eproto
namespace LT {
class interaction;
class interactionDefaultTypeInternal;
extern interactionDefaultTypeInternal _interaction_default_instance_;
class interaction_BaseCommandInfo;
class interaction_BaseCommandInfoDefaultTypeInternal;
extern interaction_BaseCommandInfoDefaultTypeInternal _interaction_BaseCommandInfo_default_instance_;
class interaction_BaseStationInfo;
class interaction_BaseStationInfoDefaultTypeInternal;
extern interaction_BaseStationInfoDefaultTypeInternal _interaction_BaseStationInfo_default_instance_;
class interaction_TermCommandInfo;
class interaction_TermCommandInfoDefaultTypeInternal;
extern interaction_TermCommandInfoDefaultTypeInternal _interaction_TermCommandInfo_default_instance_;
class interaction_TerminalInfo;
class interaction_TerminalInfoDefaultTypeInternal;
extern interaction_TerminalInfoDefaultTypeInternal _interaction_TerminalInfo_default_instance_;
}  // namespace LT
namespace LT {

enum interaction_BaseCommandInfo_BaseCommandId {
  interaction_BaseCommandInfo_BaseCommandId_SET_ADDR_CMD = 0,
  interaction_BaseCommandInfo_BaseCommandId_SET_FREQ_CMD = 1,
  interaction_BaseCommandInfo_BaseCommandId_SET_MOTOR_CMD = 2,
  interaction_BaseCommandInfo_BaseCommandId_SET_LED_CMD = 3,
  interaction_BaseCommandInfo_BaseCommandId_LS_CMD = 4,
  interaction_BaseCommandInfo_BaseCommandId_LS_ALL = 5
};
bool interaction_BaseCommandInfo_BaseCommandId_IsValid(int value);
const interaction_BaseCommandInfo_BaseCommandId interaction_BaseCommandInfo_BaseCommandId_BaseCommandId_MIN = interaction_BaseCommandInfo_BaseCommandId_SET_ADDR_CMD;
const interaction_BaseCommandInfo_BaseCommandId interaction_BaseCommandInfo_BaseCommandId_BaseCommandId_MAX = interaction_BaseCommandInfo_BaseCommandId_LS_ALL;
const int interaction_BaseCommandInfo_BaseCommandId_BaseCommandId_ARRAYSIZE = interaction_BaseCommandInfo_BaseCommandId_BaseCommandId_MAX + 1;

const ::google::protobuf::EnumDescriptor* interaction_BaseCommandInfo_BaseCommandId_descriptor();
inline const ::std::string& interaction_BaseCommandInfo_BaseCommandId_Name(interaction_BaseCommandInfo_BaseCommandId value) {
  return ::google::protobuf::internal::NameOfEnum(
    interaction_BaseCommandInfo_BaseCommandId_descriptor(), value);
}
inline bool interaction_BaseCommandInfo_BaseCommandId_Parse(
    const ::std::string& name, interaction_BaseCommandInfo_BaseCommandId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<interaction_BaseCommandInfo_BaseCommandId>(
    interaction_BaseCommandInfo_BaseCommandId_descriptor(), name, value);
}
enum interaction_TermCommandInfo_TermCommandId {
  interaction_TermCommandInfo_TermCommandId_ENTER_FIXED_CMD = 0,
  interaction_TermCommandInfo_TermCommandId_QUIT_FIXED_CMD = 1,
  interaction_TermCommandInfo_TermCommandId_REBOOT_TERM_CMD = 2
};
bool interaction_TermCommandInfo_TermCommandId_IsValid(int value);
const interaction_TermCommandInfo_TermCommandId interaction_TermCommandInfo_TermCommandId_TermCommandId_MIN = interaction_TermCommandInfo_TermCommandId_ENTER_FIXED_CMD;
const interaction_TermCommandInfo_TermCommandId interaction_TermCommandInfo_TermCommandId_TermCommandId_MAX = interaction_TermCommandInfo_TermCommandId_REBOOT_TERM_CMD;
const int interaction_TermCommandInfo_TermCommandId_TermCommandId_ARRAYSIZE = interaction_TermCommandInfo_TermCommandId_TermCommandId_MAX + 1;

const ::google::protobuf::EnumDescriptor* interaction_TermCommandInfo_TermCommandId_descriptor();
inline const ::std::string& interaction_TermCommandInfo_TermCommandId_Name(interaction_TermCommandInfo_TermCommandId value) {
  return ::google::protobuf::internal::NameOfEnum(
    interaction_TermCommandInfo_TermCommandId_descriptor(), value);
}
inline bool interaction_TermCommandInfo_TermCommandId_Parse(
    const ::std::string& name, interaction_TermCommandInfo_TermCommandId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<interaction_TermCommandInfo_TermCommandId>(
    interaction_TermCommandInfo_TermCommandId_descriptor(), name, value);
}
// ===================================================================

class interaction_TerminalInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.interaction.TerminalInfo) */ {
 public:
  interaction_TerminalInfo();
  virtual ~interaction_TerminalInfo();

  interaction_TerminalInfo(const interaction_TerminalInfo& from);

  inline interaction_TerminalInfo& operator=(const interaction_TerminalInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  interaction_TerminalInfo(interaction_TerminalInfo&& from) noexcept
    : interaction_TerminalInfo() {
    *this = ::std::move(from);
  }

  inline interaction_TerminalInfo& operator=(interaction_TerminalInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const interaction_TerminalInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const interaction_TerminalInfo* internal_default_instance() {
    return reinterpret_cast<const interaction_TerminalInfo*>(
               &_interaction_TerminalInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(interaction_TerminalInfo* other);
  friend void swap(interaction_TerminalInfo& a, interaction_TerminalInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline interaction_TerminalInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  interaction_TerminalInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const interaction_TerminalInfo& from);
  void MergeFrom(const interaction_TerminalInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(interaction_TerminalInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string hostname = 1;
  bool has_hostname() const;
  void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // required string mac_addr = 2;
  bool has_mac_addr() const;
  void clear_mac_addr();
  static const int kMacAddrFieldNumber = 2;
  const ::std::string& mac_addr() const;
  void set_mac_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_mac_addr(::std::string&& value);
  #endif
  void set_mac_addr(const char* value);
  void set_mac_addr(const char* value, size_t size);
  ::std::string* mutable_mac_addr();
  ::std::string* release_mac_addr();
  void set_allocated_mac_addr(::std::string* mac_addr);

  // required string ip_addr = 3;
  bool has_ip_addr() const;
  void clear_ip_addr();
  static const int kIpAddrFieldNumber = 3;
  const ::std::string& ip_addr() const;
  void set_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_addr(::std::string&& value);
  #endif
  void set_ip_addr(const char* value);
  void set_ip_addr(const char* value, size_t size);
  ::std::string* mutable_ip_addr();
  ::std::string* release_ip_addr();
  void set_allocated_ip_addr(::std::string* ip_addr);

  // optional string sensor_channel = 4;
  bool has_sensor_channel() const;
  void clear_sensor_channel();
  static const int kSensorChannelFieldNumber = 4;
  const ::std::string& sensor_channel() const;
  void set_sensor_channel(const ::std::string& value);
  #if LANG_CXX11
  void set_sensor_channel(::std::string&& value);
  #endif
  void set_sensor_channel(const char* value);
  void set_sensor_channel(const char* value, size_t size);
  ::std::string* mutable_sensor_channel();
  ::std::string* release_sensor_channel();
  void set_allocated_sensor_channel(::std::string* sensor_channel);

  // optional string sensor_height = 5;
  bool has_sensor_height() const;
  void clear_sensor_height();
  static const int kSensorHeightFieldNumber = 5;
  const ::std::string& sensor_height() const;
  void set_sensor_height(const ::std::string& value);
  #if LANG_CXX11
  void set_sensor_height(::std::string&& value);
  #endif
  void set_sensor_height(const char* value);
  void set_sensor_height(const char* value, size_t size);
  ::std::string* mutable_sensor_height();
  ::std::string* release_sensor_height();
  void set_allocated_sensor_height(::std::string* sensor_height);

  // optional string sensor_offset = 6;
  bool has_sensor_offset() const;
  void clear_sensor_offset();
  static const int kSensorOffsetFieldNumber = 6;
  const ::std::string& sensor_offset() const;
  void set_sensor_offset(const ::std::string& value);
  #if LANG_CXX11
  void set_sensor_offset(::std::string&& value);
  #endif
  void set_sensor_offset(const char* value);
  void set_sensor_offset(const char* value, size_t size);
  ::std::string* mutable_sensor_offset();
  ::std::string* release_sensor_offset();
  void set_allocated_sensor_offset(::std::string* sensor_offset);

  // optional string romote_ip_addr = 7;
  bool has_romote_ip_addr() const;
  void clear_romote_ip_addr();
  static const int kRomoteIpAddrFieldNumber = 7;
  const ::std::string& romote_ip_addr() const;
  void set_romote_ip_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_romote_ip_addr(::std::string&& value);
  #endif
  void set_romote_ip_addr(const char* value);
  void set_romote_ip_addr(const char* value, size_t size);
  ::std::string* mutable_romote_ip_addr();
  ::std::string* release_romote_ip_addr();
  void set_allocated_romote_ip_addr(::std::string* romote_ip_addr);

  // optional string term_config = 9;
  bool has_term_config() const;
  void clear_term_config();
  static const int kTermConfigFieldNumber = 9;
  const ::std::string& term_config() const;
  void set_term_config(const ::std::string& value);
  #if LANG_CXX11
  void set_term_config(::std::string&& value);
  #endif
  void set_term_config(const char* value);
  void set_term_config(const char* value, size_t size);
  ::std::string* mutable_term_config();
  ::std::string* release_term_config();
  void set_allocated_term_config(::std::string* term_config);

  // optional bool calibration_status = 8;
  bool has_calibration_status() const;
  void clear_calibration_status();
  static const int kCalibrationStatusFieldNumber = 8;
  bool calibration_status() const;
  void set_calibration_status(bool value);

  // @@protoc_insertion_point(class_scope:LT.interaction.TerminalInfo)
 private:
  void set_has_hostname();
  void clear_has_hostname();
  void set_has_mac_addr();
  void clear_has_mac_addr();
  void set_has_ip_addr();
  void clear_has_ip_addr();
  void set_has_sensor_channel();
  void clear_has_sensor_channel();
  void set_has_sensor_height();
  void clear_has_sensor_height();
  void set_has_sensor_offset();
  void clear_has_sensor_offset();
  void set_has_romote_ip_addr();
  void clear_has_romote_ip_addr();
  void set_has_calibration_status();
  void clear_has_calibration_status();
  void set_has_term_config();
  void clear_has_term_config();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::internal::ArenaStringPtr mac_addr_;
  ::google::protobuf::internal::ArenaStringPtr ip_addr_;
  ::google::protobuf::internal::ArenaStringPtr sensor_channel_;
  ::google::protobuf::internal::ArenaStringPtr sensor_height_;
  ::google::protobuf::internal::ArenaStringPtr sensor_offset_;
  ::google::protobuf::internal::ArenaStringPtr romote_ip_addr_;
  ::google::protobuf::internal::ArenaStringPtr term_config_;
  bool calibration_status_;
  friend struct ::protobuf_LT_2eInteraction_2eproto::TableStruct;
  friend void ::protobuf_LT_2eInteraction_2eproto::InitDefaultsinteraction_TerminalInfoImpl();
};
// -------------------------------------------------------------------

class interaction_BaseStationInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.interaction.BaseStationInfo) */ {
 public:
  interaction_BaseStationInfo();
  virtual ~interaction_BaseStationInfo();

  interaction_BaseStationInfo(const interaction_BaseStationInfo& from);

  inline interaction_BaseStationInfo& operator=(const interaction_BaseStationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  interaction_BaseStationInfo(interaction_BaseStationInfo&& from) noexcept
    : interaction_BaseStationInfo() {
    *this = ::std::move(from);
  }

  inline interaction_BaseStationInfo& operator=(interaction_BaseStationInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const interaction_BaseStationInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const interaction_BaseStationInfo* internal_default_instance() {
    return reinterpret_cast<const interaction_BaseStationInfo*>(
               &_interaction_BaseStationInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(interaction_BaseStationInfo* other);
  friend void swap(interaction_BaseStationInfo& a, interaction_BaseStationInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline interaction_BaseStationInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  interaction_BaseStationInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const interaction_BaseStationInfo& from);
  void MergeFrom(const interaction_BaseStationInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(interaction_BaseStationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string hostname = 1;
  bool has_hostname() const;
  void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // optional string bs_freq = 4;
  bool has_bs_freq() const;
  void clear_bs_freq();
  static const int kBsFreqFieldNumber = 4;
  const ::std::string& bs_freq() const;
  void set_bs_freq(const ::std::string& value);
  #if LANG_CXX11
  void set_bs_freq(::std::string&& value);
  #endif
  void set_bs_freq(const char* value);
  void set_bs_freq(const char* value, size_t size);
  ::std::string* mutable_bs_freq();
  ::std::string* release_bs_freq();
  void set_allocated_bs_freq(::std::string* bs_freq);

  // optional string bs_location = 5;
  bool has_bs_location() const;
  void clear_bs_location();
  static const int kBsLocationFieldNumber = 5;
  const ::std::string& bs_location() const;
  void set_bs_location(const ::std::string& value);
  #if LANG_CXX11
  void set_bs_location(::std::string&& value);
  #endif
  void set_bs_location(const char* value);
  void set_bs_location(const char* value, size_t size);
  ::std::string* mutable_bs_location();
  ::std::string* release_bs_location();
  void set_allocated_bs_location(::std::string* bs_location);

  // optional string bs_orientation = 6;
  bool has_bs_orientation() const;
  void clear_bs_orientation();
  static const int kBsOrientationFieldNumber = 6;
  const ::std::string& bs_orientation() const;
  void set_bs_orientation(const ::std::string& value);
  #if LANG_CXX11
  void set_bs_orientation(::std::string&& value);
  #endif
  void set_bs_orientation(const char* value);
  void set_bs_orientation(const char* value, size_t size);
  ::std::string* mutable_bs_orientation();
  ::std::string* release_bs_orientation();
  void set_allocated_bs_orientation(::std::string* bs_orientation);

  // optional string motor_speed = 9;
  bool has_motor_speed() const;
  void clear_motor_speed();
  static const int kMotorSpeedFieldNumber = 9;
  const ::std::string& motor_speed() const;
  void set_motor_speed(const ::std::string& value);
  #if LANG_CXX11
  void set_motor_speed(::std::string&& value);
  #endif
  void set_motor_speed(const char* value);
  void set_motor_speed(const char* value, size_t size);
  ::std::string* mutable_motor_speed();
  ::std::string* release_motor_speed();
  void set_allocated_motor_speed(::std::string* motor_speed);

  // required uint32 bs_id = 2;
  bool has_bs_id() const;
  void clear_bs_id();
  static const int kBsIdFieldNumber = 2;
  ::google::protobuf::uint32 bs_id() const;
  void set_bs_id(::google::protobuf::uint32 value);

  // required uint32 ingroup_addr = 3;
  bool has_ingroup_addr() const;
  void clear_ingroup_addr();
  static const int kIngroupAddrFieldNumber = 3;
  ::google::protobuf::uint32 ingroup_addr() const;
  void set_ingroup_addr(::google::protobuf::uint32 value);

  // optional bool led_status = 7;
  bool has_led_status() const;
  void clear_led_status();
  static const int kLedStatusFieldNumber = 7;
  bool led_status() const;
  void set_led_status(bool value);

  // optional bool motor_status = 8;
  bool has_motor_status() const;
  void clear_motor_status();
  static const int kMotorStatusFieldNumber = 8;
  bool motor_status() const;
  void set_motor_status(bool value);

  // @@protoc_insertion_point(class_scope:LT.interaction.BaseStationInfo)
 private:
  void set_has_hostname();
  void clear_has_hostname();
  void set_has_bs_id();
  void clear_has_bs_id();
  void set_has_ingroup_addr();
  void clear_has_ingroup_addr();
  void set_has_bs_freq();
  void clear_has_bs_freq();
  void set_has_bs_location();
  void clear_has_bs_location();
  void set_has_bs_orientation();
  void clear_has_bs_orientation();
  void set_has_led_status();
  void clear_has_led_status();
  void set_has_motor_status();
  void clear_has_motor_status();
  void set_has_motor_speed();
  void clear_has_motor_speed();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::internal::ArenaStringPtr bs_freq_;
  ::google::protobuf::internal::ArenaStringPtr bs_location_;
  ::google::protobuf::internal::ArenaStringPtr bs_orientation_;
  ::google::protobuf::internal::ArenaStringPtr motor_speed_;
  ::google::protobuf::uint32 bs_id_;
  ::google::protobuf::uint32 ingroup_addr_;
  bool led_status_;
  bool motor_status_;
  friend struct ::protobuf_LT_2eInteraction_2eproto::TableStruct;
  friend void ::protobuf_LT_2eInteraction_2eproto::InitDefaultsinteraction_BaseStationInfoImpl();
};
// -------------------------------------------------------------------

class interaction_BaseCommandInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.interaction.BaseCommandInfo) */ {
 public:
  interaction_BaseCommandInfo();
  virtual ~interaction_BaseCommandInfo();

  interaction_BaseCommandInfo(const interaction_BaseCommandInfo& from);

  inline interaction_BaseCommandInfo& operator=(const interaction_BaseCommandInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  interaction_BaseCommandInfo(interaction_BaseCommandInfo&& from) noexcept
    : interaction_BaseCommandInfo() {
    *this = ::std::move(from);
  }

  inline interaction_BaseCommandInfo& operator=(interaction_BaseCommandInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const interaction_BaseCommandInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const interaction_BaseCommandInfo* internal_default_instance() {
    return reinterpret_cast<const interaction_BaseCommandInfo*>(
               &_interaction_BaseCommandInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(interaction_BaseCommandInfo* other);
  friend void swap(interaction_BaseCommandInfo& a, interaction_BaseCommandInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline interaction_BaseCommandInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  interaction_BaseCommandInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const interaction_BaseCommandInfo& from);
  void MergeFrom(const interaction_BaseCommandInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(interaction_BaseCommandInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef interaction_BaseCommandInfo_BaseCommandId BaseCommandId;
  static const BaseCommandId SET_ADDR_CMD =
    interaction_BaseCommandInfo_BaseCommandId_SET_ADDR_CMD;
  static const BaseCommandId SET_FREQ_CMD =
    interaction_BaseCommandInfo_BaseCommandId_SET_FREQ_CMD;
  static const BaseCommandId SET_MOTOR_CMD =
    interaction_BaseCommandInfo_BaseCommandId_SET_MOTOR_CMD;
  static const BaseCommandId SET_LED_CMD =
    interaction_BaseCommandInfo_BaseCommandId_SET_LED_CMD;
  static const BaseCommandId LS_CMD =
    interaction_BaseCommandInfo_BaseCommandId_LS_CMD;
  static const BaseCommandId LS_ALL =
    interaction_BaseCommandInfo_BaseCommandId_LS_ALL;
  static inline bool BaseCommandId_IsValid(int value) {
    return interaction_BaseCommandInfo_BaseCommandId_IsValid(value);
  }
  static const BaseCommandId BaseCommandId_MIN =
    interaction_BaseCommandInfo_BaseCommandId_BaseCommandId_MIN;
  static const BaseCommandId BaseCommandId_MAX =
    interaction_BaseCommandInfo_BaseCommandId_BaseCommandId_MAX;
  static const int BaseCommandId_ARRAYSIZE =
    interaction_BaseCommandInfo_BaseCommandId_BaseCommandId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BaseCommandId_descriptor() {
    return interaction_BaseCommandInfo_BaseCommandId_descriptor();
  }
  static inline const ::std::string& BaseCommandId_Name(BaseCommandId value) {
    return interaction_BaseCommandInfo_BaseCommandId_Name(value);
  }
  static inline bool BaseCommandId_Parse(const ::std::string& name,
      BaseCommandId* value) {
    return interaction_BaseCommandInfo_BaseCommandId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string cmd_arg1 = 2;
  bool has_cmd_arg1() const;
  void clear_cmd_arg1();
  static const int kCmdArg1FieldNumber = 2;
  const ::std::string& cmd_arg1() const;
  void set_cmd_arg1(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd_arg1(::std::string&& value);
  #endif
  void set_cmd_arg1(const char* value);
  void set_cmd_arg1(const char* value, size_t size);
  ::std::string* mutable_cmd_arg1();
  ::std::string* release_cmd_arg1();
  void set_allocated_cmd_arg1(::std::string* cmd_arg1);

  // optional string cmd_arg2 = 3;
  bool has_cmd_arg2() const;
  void clear_cmd_arg2();
  static const int kCmdArg2FieldNumber = 3;
  const ::std::string& cmd_arg2() const;
  void set_cmd_arg2(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd_arg2(::std::string&& value);
  #endif
  void set_cmd_arg2(const char* value);
  void set_cmd_arg2(const char* value, size_t size);
  ::std::string* mutable_cmd_arg2();
  ::std::string* release_cmd_arg2();
  void set_allocated_cmd_arg2(::std::string* cmd_arg2);

  // optional string cmd_arg3 = 4;
  bool has_cmd_arg3() const;
  void clear_cmd_arg3();
  static const int kCmdArg3FieldNumber = 4;
  const ::std::string& cmd_arg3() const;
  void set_cmd_arg3(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd_arg3(::std::string&& value);
  #endif
  void set_cmd_arg3(const char* value);
  void set_cmd_arg3(const char* value, size_t size);
  ::std::string* mutable_cmd_arg3();
  ::std::string* release_cmd_arg3();
  void set_allocated_cmd_arg3(::std::string* cmd_arg3);

  // required .LT.interaction.BaseCommandInfo.BaseCommandId cmd_id = 1;
  bool has_cmd_id() const;
  void clear_cmd_id();
  static const int kCmdIdFieldNumber = 1;
  ::LT::interaction_BaseCommandInfo_BaseCommandId cmd_id() const;
  void set_cmd_id(::LT::interaction_BaseCommandInfo_BaseCommandId value);

  // @@protoc_insertion_point(class_scope:LT.interaction.BaseCommandInfo)
 private:
  void set_has_cmd_id();
  void clear_has_cmd_id();
  void set_has_cmd_arg1();
  void clear_has_cmd_arg1();
  void set_has_cmd_arg2();
  void clear_has_cmd_arg2();
  void set_has_cmd_arg3();
  void clear_has_cmd_arg3();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cmd_arg1_;
  ::google::protobuf::internal::ArenaStringPtr cmd_arg2_;
  ::google::protobuf::internal::ArenaStringPtr cmd_arg3_;
  int cmd_id_;
  friend struct ::protobuf_LT_2eInteraction_2eproto::TableStruct;
  friend void ::protobuf_LT_2eInteraction_2eproto::InitDefaultsinteraction_BaseCommandInfoImpl();
};
// -------------------------------------------------------------------

class interaction_TermCommandInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.interaction.TermCommandInfo) */ {
 public:
  interaction_TermCommandInfo();
  virtual ~interaction_TermCommandInfo();

  interaction_TermCommandInfo(const interaction_TermCommandInfo& from);

  inline interaction_TermCommandInfo& operator=(const interaction_TermCommandInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  interaction_TermCommandInfo(interaction_TermCommandInfo&& from) noexcept
    : interaction_TermCommandInfo() {
    *this = ::std::move(from);
  }

  inline interaction_TermCommandInfo& operator=(interaction_TermCommandInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const interaction_TermCommandInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const interaction_TermCommandInfo* internal_default_instance() {
    return reinterpret_cast<const interaction_TermCommandInfo*>(
               &_interaction_TermCommandInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(interaction_TermCommandInfo* other);
  friend void swap(interaction_TermCommandInfo& a, interaction_TermCommandInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline interaction_TermCommandInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  interaction_TermCommandInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const interaction_TermCommandInfo& from);
  void MergeFrom(const interaction_TermCommandInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(interaction_TermCommandInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef interaction_TermCommandInfo_TermCommandId TermCommandId;
  static const TermCommandId ENTER_FIXED_CMD =
    interaction_TermCommandInfo_TermCommandId_ENTER_FIXED_CMD;
  static const TermCommandId QUIT_FIXED_CMD =
    interaction_TermCommandInfo_TermCommandId_QUIT_FIXED_CMD;
  static const TermCommandId REBOOT_TERM_CMD =
    interaction_TermCommandInfo_TermCommandId_REBOOT_TERM_CMD;
  static inline bool TermCommandId_IsValid(int value) {
    return interaction_TermCommandInfo_TermCommandId_IsValid(value);
  }
  static const TermCommandId TermCommandId_MIN =
    interaction_TermCommandInfo_TermCommandId_TermCommandId_MIN;
  static const TermCommandId TermCommandId_MAX =
    interaction_TermCommandInfo_TermCommandId_TermCommandId_MAX;
  static const int TermCommandId_ARRAYSIZE =
    interaction_TermCommandInfo_TermCommandId_TermCommandId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TermCommandId_descriptor() {
    return interaction_TermCommandInfo_TermCommandId_descriptor();
  }
  static inline const ::std::string& TermCommandId_Name(TermCommandId value) {
    return interaction_TermCommandInfo_TermCommandId_Name(value);
  }
  static inline bool TermCommandId_Parse(const ::std::string& name,
      TermCommandId* value) {
    return interaction_TermCommandInfo_TermCommandId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string cmd_arg1 = 2;
  bool has_cmd_arg1() const;
  void clear_cmd_arg1();
  static const int kCmdArg1FieldNumber = 2;
  const ::std::string& cmd_arg1() const;
  void set_cmd_arg1(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd_arg1(::std::string&& value);
  #endif
  void set_cmd_arg1(const char* value);
  void set_cmd_arg1(const char* value, size_t size);
  ::std::string* mutable_cmd_arg1();
  ::std::string* release_cmd_arg1();
  void set_allocated_cmd_arg1(::std::string* cmd_arg1);

  // optional string cmd_arg2 = 3;
  bool has_cmd_arg2() const;
  void clear_cmd_arg2();
  static const int kCmdArg2FieldNumber = 3;
  const ::std::string& cmd_arg2() const;
  void set_cmd_arg2(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd_arg2(::std::string&& value);
  #endif
  void set_cmd_arg2(const char* value);
  void set_cmd_arg2(const char* value, size_t size);
  ::std::string* mutable_cmd_arg2();
  ::std::string* release_cmd_arg2();
  void set_allocated_cmd_arg2(::std::string* cmd_arg2);

  // optional string cmd_arg3 = 4;
  bool has_cmd_arg3() const;
  void clear_cmd_arg3();
  static const int kCmdArg3FieldNumber = 4;
  const ::std::string& cmd_arg3() const;
  void set_cmd_arg3(const ::std::string& value);
  #if LANG_CXX11
  void set_cmd_arg3(::std::string&& value);
  #endif
  void set_cmd_arg3(const char* value);
  void set_cmd_arg3(const char* value, size_t size);
  ::std::string* mutable_cmd_arg3();
  ::std::string* release_cmd_arg3();
  void set_allocated_cmd_arg3(::std::string* cmd_arg3);

  // required .LT.interaction.TermCommandInfo.TermCommandId cmd_id = 1;
  bool has_cmd_id() const;
  void clear_cmd_id();
  static const int kCmdIdFieldNumber = 1;
  ::LT::interaction_TermCommandInfo_TermCommandId cmd_id() const;
  void set_cmd_id(::LT::interaction_TermCommandInfo_TermCommandId value);

  // @@protoc_insertion_point(class_scope:LT.interaction.TermCommandInfo)
 private:
  void set_has_cmd_id();
  void clear_has_cmd_id();
  void set_has_cmd_arg1();
  void clear_has_cmd_arg1();
  void set_has_cmd_arg2();
  void clear_has_cmd_arg2();
  void set_has_cmd_arg3();
  void clear_has_cmd_arg3();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr cmd_arg1_;
  ::google::protobuf::internal::ArenaStringPtr cmd_arg2_;
  ::google::protobuf::internal::ArenaStringPtr cmd_arg3_;
  int cmd_id_;
  friend struct ::protobuf_LT_2eInteraction_2eproto::TableStruct;
  friend void ::protobuf_LT_2eInteraction_2eproto::InitDefaultsinteraction_TermCommandInfoImpl();
};
// -------------------------------------------------------------------

class interaction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LT.interaction) */ {
 public:
  interaction();
  virtual ~interaction();

  interaction(const interaction& from);

  inline interaction& operator=(const interaction& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  interaction(interaction&& from) noexcept
    : interaction() {
    *this = ::std::move(from);
  }

  inline interaction& operator=(interaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const interaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const interaction* internal_default_instance() {
    return reinterpret_cast<const interaction*>(
               &_interaction_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(interaction* other);
  friend void swap(interaction& a, interaction& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline interaction* New() const PROTOBUF_FINAL { return New(NULL); }

  interaction* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const interaction& from);
  void MergeFrom(const interaction& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(interaction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef interaction_TerminalInfo TerminalInfo;
  typedef interaction_BaseStationInfo BaseStationInfo;
  typedef interaction_BaseCommandInfo BaseCommandInfo;
  typedef interaction_TermCommandInfo TermCommandInfo;

  // accessors -------------------------------------------------------

  // repeated .LT.interaction.TerminalInfo terminal_info_list = 10;
  int terminal_info_list_size() const;
  void clear_terminal_info_list();
  static const int kTerminalInfoListFieldNumber = 10;
  const ::LT::interaction_TerminalInfo& terminal_info_list(int index) const;
  ::LT::interaction_TerminalInfo* mutable_terminal_info_list(int index);
  ::LT::interaction_TerminalInfo* add_terminal_info_list();
  ::google::protobuf::RepeatedPtrField< ::LT::interaction_TerminalInfo >*
      mutable_terminal_info_list();
  const ::google::protobuf::RepeatedPtrField< ::LT::interaction_TerminalInfo >&
      terminal_info_list() const;

  // repeated .LT.interaction.BaseStationInfo base_station_info_list = 11;
  int base_station_info_list_size() const;
  void clear_base_station_info_list();
  static const int kBaseStationInfoListFieldNumber = 11;
  const ::LT::interaction_BaseStationInfo& base_station_info_list(int index) const;
  ::LT::interaction_BaseStationInfo* mutable_base_station_info_list(int index);
  ::LT::interaction_BaseStationInfo* add_base_station_info_list();
  ::google::protobuf::RepeatedPtrField< ::LT::interaction_BaseStationInfo >*
      mutable_base_station_info_list();
  const ::google::protobuf::RepeatedPtrField< ::LT::interaction_BaseStationInfo >&
      base_station_info_list() const;

  // optional string config_file = 9;
  bool has_config_file() const;
  void clear_config_file();
  static const int kConfigFileFieldNumber = 9;
  const ::std::string& config_file() const;
  void set_config_file(const ::std::string& value);
  #if LANG_CXX11
  void set_config_file(::std::string&& value);
  #endif
  void set_config_file(const char* value);
  void set_config_file(const char* value, size_t size);
  ::std::string* mutable_config_file();
  ::std::string* release_config_file();
  void set_allocated_config_file(::std::string* config_file);

  // optional .LT.interaction.TerminalInfo terminal_info = 2;
  bool has_terminal_info() const;
  void clear_terminal_info();
  static const int kTerminalInfoFieldNumber = 2;
  const ::LT::interaction_TerminalInfo& terminal_info() const;
  ::LT::interaction_TerminalInfo* release_terminal_info();
  ::LT::interaction_TerminalInfo* mutable_terminal_info();
  void set_allocated_terminal_info(::LT::interaction_TerminalInfo* terminal_info);

  // optional .LT.interaction.TermCommandInfo terminal_cmd_info = 3;
  bool has_terminal_cmd_info() const;
  void clear_terminal_cmd_info();
  static const int kTerminalCmdInfoFieldNumber = 3;
  const ::LT::interaction_TermCommandInfo& terminal_cmd_info() const;
  ::LT::interaction_TermCommandInfo* release_terminal_cmd_info();
  ::LT::interaction_TermCommandInfo* mutable_terminal_cmd_info();
  void set_allocated_terminal_cmd_info(::LT::interaction_TermCommandInfo* terminal_cmd_info);

  // optional .LT.interaction.BaseStationInfo base_station_info = 5;
  bool has_base_station_info() const;
  void clear_base_station_info();
  static const int kBaseStationInfoFieldNumber = 5;
  const ::LT::interaction_BaseStationInfo& base_station_info() const;
  ::LT::interaction_BaseStationInfo* release_base_station_info();
  ::LT::interaction_BaseStationInfo* mutable_base_station_info();
  void set_allocated_base_station_info(::LT::interaction_BaseStationInfo* base_station_info);

  // optional .LT.interaction.BaseCommandInfo base_cmd_info = 6;
  bool has_base_cmd_info() const;
  void clear_base_cmd_info();
  static const int kBaseCmdInfoFieldNumber = 6;
  const ::LT::interaction_BaseCommandInfo& base_cmd_info() const;
  ::LT::interaction_BaseCommandInfo* release_base_cmd_info();
  ::LT::interaction_BaseCommandInfo* mutable_base_cmd_info();
  void set_allocated_base_cmd_info(::LT::interaction_BaseCommandInfo* base_cmd_info);

  // required int32 msg_id = 1;
  bool has_msg_id() const;
  void clear_msg_id();
  static const int kMsgIdFieldNumber = 1;
  ::google::protobuf::int32 msg_id() const;
  void set_msg_id(::google::protobuf::int32 value);

  // optional bool terminal_cmd_result = 4;
  bool has_terminal_cmd_result() const;
  void clear_terminal_cmd_result();
  static const int kTerminalCmdResultFieldNumber = 4;
  bool terminal_cmd_result() const;
  void set_terminal_cmd_result(bool value);

  // optional bool base_cmd_result = 7;
  bool has_base_cmd_result() const;
  void clear_base_cmd_result();
  static const int kBaseCmdResultFieldNumber = 7;
  bool base_cmd_result() const;
  void set_base_cmd_result(bool value);

  // @@protoc_insertion_point(class_scope:LT.interaction)
 private:
  void set_has_msg_id();
  void clear_has_msg_id();
  void set_has_terminal_info();
  void clear_has_terminal_info();
  void set_has_terminal_cmd_info();
  void clear_has_terminal_cmd_info();
  void set_has_terminal_cmd_result();
  void clear_has_terminal_cmd_result();
  void set_has_base_station_info();
  void clear_has_base_station_info();
  void set_has_base_cmd_info();
  void clear_has_base_cmd_info();
  void set_has_base_cmd_result();
  void clear_has_base_cmd_result();
  void set_has_config_file();
  void clear_has_config_file();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::LT::interaction_TerminalInfo > terminal_info_list_;
  ::google::protobuf::RepeatedPtrField< ::LT::interaction_BaseStationInfo > base_station_info_list_;
  ::google::protobuf::internal::ArenaStringPtr config_file_;
  ::LT::interaction_TerminalInfo* terminal_info_;
  ::LT::interaction_TermCommandInfo* terminal_cmd_info_;
  ::LT::interaction_BaseStationInfo* base_station_info_;
  ::LT::interaction_BaseCommandInfo* base_cmd_info_;
  ::google::protobuf::int32 msg_id_;
  bool terminal_cmd_result_;
  bool base_cmd_result_;
  friend struct ::protobuf_LT_2eInteraction_2eproto::TableStruct;
  friend void ::protobuf_LT_2eInteraction_2eproto::InitDefaultsinteractionImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// interaction_TerminalInfo

// required string hostname = 1;
inline bool interaction_TerminalInfo::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void interaction_TerminalInfo::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void interaction_TerminalInfo::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void interaction_TerminalInfo::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
inline const ::std::string& interaction_TerminalInfo::hostname() const {
  // @@protoc_insertion_point(field_get:LT.interaction.TerminalInfo.hostname)
  return hostname_.GetNoArena();
}
inline void interaction_TerminalInfo::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.TerminalInfo.hostname)
}
#if LANG_CXX11
inline void interaction_TerminalInfo::set_hostname(::std::string&& value) {
  set_has_hostname();
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.TerminalInfo.hostname)
}
#endif
inline void interaction_TerminalInfo::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.TerminalInfo.hostname)
}
inline void interaction_TerminalInfo::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.TerminalInfo.hostname)
}
inline ::std::string* interaction_TerminalInfo::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:LT.interaction.TerminalInfo.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_TerminalInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:LT.interaction.TerminalInfo.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_TerminalInfo::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.TerminalInfo.hostname)
}

// required string mac_addr = 2;
inline bool interaction_TerminalInfo::has_mac_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void interaction_TerminalInfo::set_has_mac_addr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void interaction_TerminalInfo::clear_has_mac_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void interaction_TerminalInfo::clear_mac_addr() {
  mac_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mac_addr();
}
inline const ::std::string& interaction_TerminalInfo::mac_addr() const {
  // @@protoc_insertion_point(field_get:LT.interaction.TerminalInfo.mac_addr)
  return mac_addr_.GetNoArena();
}
inline void interaction_TerminalInfo::set_mac_addr(const ::std::string& value) {
  set_has_mac_addr();
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.TerminalInfo.mac_addr)
}
#if LANG_CXX11
inline void interaction_TerminalInfo::set_mac_addr(::std::string&& value) {
  set_has_mac_addr();
  mac_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.TerminalInfo.mac_addr)
}
#endif
inline void interaction_TerminalInfo::set_mac_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_mac_addr();
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.TerminalInfo.mac_addr)
}
inline void interaction_TerminalInfo::set_mac_addr(const char* value, size_t size) {
  set_has_mac_addr();
  mac_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.TerminalInfo.mac_addr)
}
inline ::std::string* interaction_TerminalInfo::mutable_mac_addr() {
  set_has_mac_addr();
  // @@protoc_insertion_point(field_mutable:LT.interaction.TerminalInfo.mac_addr)
  return mac_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_TerminalInfo::release_mac_addr() {
  // @@protoc_insertion_point(field_release:LT.interaction.TerminalInfo.mac_addr)
  clear_has_mac_addr();
  return mac_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_TerminalInfo::set_allocated_mac_addr(::std::string* mac_addr) {
  if (mac_addr != NULL) {
    set_has_mac_addr();
  } else {
    clear_has_mac_addr();
  }
  mac_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac_addr);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.TerminalInfo.mac_addr)
}

// required string ip_addr = 3;
inline bool interaction_TerminalInfo::has_ip_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void interaction_TerminalInfo::set_has_ip_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void interaction_TerminalInfo::clear_has_ip_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void interaction_TerminalInfo::clear_ip_addr() {
  ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip_addr();
}
inline const ::std::string& interaction_TerminalInfo::ip_addr() const {
  // @@protoc_insertion_point(field_get:LT.interaction.TerminalInfo.ip_addr)
  return ip_addr_.GetNoArena();
}
inline void interaction_TerminalInfo::set_ip_addr(const ::std::string& value) {
  set_has_ip_addr();
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.TerminalInfo.ip_addr)
}
#if LANG_CXX11
inline void interaction_TerminalInfo::set_ip_addr(::std::string&& value) {
  set_has_ip_addr();
  ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.TerminalInfo.ip_addr)
}
#endif
inline void interaction_TerminalInfo::set_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ip_addr();
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.TerminalInfo.ip_addr)
}
inline void interaction_TerminalInfo::set_ip_addr(const char* value, size_t size) {
  set_has_ip_addr();
  ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.TerminalInfo.ip_addr)
}
inline ::std::string* interaction_TerminalInfo::mutable_ip_addr() {
  set_has_ip_addr();
  // @@protoc_insertion_point(field_mutable:LT.interaction.TerminalInfo.ip_addr)
  return ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_TerminalInfo::release_ip_addr() {
  // @@protoc_insertion_point(field_release:LT.interaction.TerminalInfo.ip_addr)
  clear_has_ip_addr();
  return ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_TerminalInfo::set_allocated_ip_addr(::std::string* ip_addr) {
  if (ip_addr != NULL) {
    set_has_ip_addr();
  } else {
    clear_has_ip_addr();
  }
  ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_addr);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.TerminalInfo.ip_addr)
}

// optional string sensor_channel = 4;
inline bool interaction_TerminalInfo::has_sensor_channel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void interaction_TerminalInfo::set_has_sensor_channel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void interaction_TerminalInfo::clear_has_sensor_channel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void interaction_TerminalInfo::clear_sensor_channel() {
  sensor_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sensor_channel();
}
inline const ::std::string& interaction_TerminalInfo::sensor_channel() const {
  // @@protoc_insertion_point(field_get:LT.interaction.TerminalInfo.sensor_channel)
  return sensor_channel_.GetNoArena();
}
inline void interaction_TerminalInfo::set_sensor_channel(const ::std::string& value) {
  set_has_sensor_channel();
  sensor_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.TerminalInfo.sensor_channel)
}
#if LANG_CXX11
inline void interaction_TerminalInfo::set_sensor_channel(::std::string&& value) {
  set_has_sensor_channel();
  sensor_channel_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.TerminalInfo.sensor_channel)
}
#endif
inline void interaction_TerminalInfo::set_sensor_channel(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sensor_channel();
  sensor_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.TerminalInfo.sensor_channel)
}
inline void interaction_TerminalInfo::set_sensor_channel(const char* value, size_t size) {
  set_has_sensor_channel();
  sensor_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.TerminalInfo.sensor_channel)
}
inline ::std::string* interaction_TerminalInfo::mutable_sensor_channel() {
  set_has_sensor_channel();
  // @@protoc_insertion_point(field_mutable:LT.interaction.TerminalInfo.sensor_channel)
  return sensor_channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_TerminalInfo::release_sensor_channel() {
  // @@protoc_insertion_point(field_release:LT.interaction.TerminalInfo.sensor_channel)
  clear_has_sensor_channel();
  return sensor_channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_TerminalInfo::set_allocated_sensor_channel(::std::string* sensor_channel) {
  if (sensor_channel != NULL) {
    set_has_sensor_channel();
  } else {
    clear_has_sensor_channel();
  }
  sensor_channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_channel);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.TerminalInfo.sensor_channel)
}

// optional string sensor_height = 5;
inline bool interaction_TerminalInfo::has_sensor_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void interaction_TerminalInfo::set_has_sensor_height() {
  _has_bits_[0] |= 0x00000010u;
}
inline void interaction_TerminalInfo::clear_has_sensor_height() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void interaction_TerminalInfo::clear_sensor_height() {
  sensor_height_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sensor_height();
}
inline const ::std::string& interaction_TerminalInfo::sensor_height() const {
  // @@protoc_insertion_point(field_get:LT.interaction.TerminalInfo.sensor_height)
  return sensor_height_.GetNoArena();
}
inline void interaction_TerminalInfo::set_sensor_height(const ::std::string& value) {
  set_has_sensor_height();
  sensor_height_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.TerminalInfo.sensor_height)
}
#if LANG_CXX11
inline void interaction_TerminalInfo::set_sensor_height(::std::string&& value) {
  set_has_sensor_height();
  sensor_height_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.TerminalInfo.sensor_height)
}
#endif
inline void interaction_TerminalInfo::set_sensor_height(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sensor_height();
  sensor_height_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.TerminalInfo.sensor_height)
}
inline void interaction_TerminalInfo::set_sensor_height(const char* value, size_t size) {
  set_has_sensor_height();
  sensor_height_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.TerminalInfo.sensor_height)
}
inline ::std::string* interaction_TerminalInfo::mutable_sensor_height() {
  set_has_sensor_height();
  // @@protoc_insertion_point(field_mutable:LT.interaction.TerminalInfo.sensor_height)
  return sensor_height_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_TerminalInfo::release_sensor_height() {
  // @@protoc_insertion_point(field_release:LT.interaction.TerminalInfo.sensor_height)
  clear_has_sensor_height();
  return sensor_height_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_TerminalInfo::set_allocated_sensor_height(::std::string* sensor_height) {
  if (sensor_height != NULL) {
    set_has_sensor_height();
  } else {
    clear_has_sensor_height();
  }
  sensor_height_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_height);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.TerminalInfo.sensor_height)
}

// optional string sensor_offset = 6;
inline bool interaction_TerminalInfo::has_sensor_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void interaction_TerminalInfo::set_has_sensor_offset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void interaction_TerminalInfo::clear_has_sensor_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void interaction_TerminalInfo::clear_sensor_offset() {
  sensor_offset_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sensor_offset();
}
inline const ::std::string& interaction_TerminalInfo::sensor_offset() const {
  // @@protoc_insertion_point(field_get:LT.interaction.TerminalInfo.sensor_offset)
  return sensor_offset_.GetNoArena();
}
inline void interaction_TerminalInfo::set_sensor_offset(const ::std::string& value) {
  set_has_sensor_offset();
  sensor_offset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.TerminalInfo.sensor_offset)
}
#if LANG_CXX11
inline void interaction_TerminalInfo::set_sensor_offset(::std::string&& value) {
  set_has_sensor_offset();
  sensor_offset_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.TerminalInfo.sensor_offset)
}
#endif
inline void interaction_TerminalInfo::set_sensor_offset(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sensor_offset();
  sensor_offset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.TerminalInfo.sensor_offset)
}
inline void interaction_TerminalInfo::set_sensor_offset(const char* value, size_t size) {
  set_has_sensor_offset();
  sensor_offset_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.TerminalInfo.sensor_offset)
}
inline ::std::string* interaction_TerminalInfo::mutable_sensor_offset() {
  set_has_sensor_offset();
  // @@protoc_insertion_point(field_mutable:LT.interaction.TerminalInfo.sensor_offset)
  return sensor_offset_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_TerminalInfo::release_sensor_offset() {
  // @@protoc_insertion_point(field_release:LT.interaction.TerminalInfo.sensor_offset)
  clear_has_sensor_offset();
  return sensor_offset_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_TerminalInfo::set_allocated_sensor_offset(::std::string* sensor_offset) {
  if (sensor_offset != NULL) {
    set_has_sensor_offset();
  } else {
    clear_has_sensor_offset();
  }
  sensor_offset_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_offset);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.TerminalInfo.sensor_offset)
}

// optional string romote_ip_addr = 7;
inline bool interaction_TerminalInfo::has_romote_ip_addr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void interaction_TerminalInfo::set_has_romote_ip_addr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void interaction_TerminalInfo::clear_has_romote_ip_addr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void interaction_TerminalInfo::clear_romote_ip_addr() {
  romote_ip_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_romote_ip_addr();
}
inline const ::std::string& interaction_TerminalInfo::romote_ip_addr() const {
  // @@protoc_insertion_point(field_get:LT.interaction.TerminalInfo.romote_ip_addr)
  return romote_ip_addr_.GetNoArena();
}
inline void interaction_TerminalInfo::set_romote_ip_addr(const ::std::string& value) {
  set_has_romote_ip_addr();
  romote_ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.TerminalInfo.romote_ip_addr)
}
#if LANG_CXX11
inline void interaction_TerminalInfo::set_romote_ip_addr(::std::string&& value) {
  set_has_romote_ip_addr();
  romote_ip_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.TerminalInfo.romote_ip_addr)
}
#endif
inline void interaction_TerminalInfo::set_romote_ip_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_romote_ip_addr();
  romote_ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.TerminalInfo.romote_ip_addr)
}
inline void interaction_TerminalInfo::set_romote_ip_addr(const char* value, size_t size) {
  set_has_romote_ip_addr();
  romote_ip_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.TerminalInfo.romote_ip_addr)
}
inline ::std::string* interaction_TerminalInfo::mutable_romote_ip_addr() {
  set_has_romote_ip_addr();
  // @@protoc_insertion_point(field_mutable:LT.interaction.TerminalInfo.romote_ip_addr)
  return romote_ip_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_TerminalInfo::release_romote_ip_addr() {
  // @@protoc_insertion_point(field_release:LT.interaction.TerminalInfo.romote_ip_addr)
  clear_has_romote_ip_addr();
  return romote_ip_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_TerminalInfo::set_allocated_romote_ip_addr(::std::string* romote_ip_addr) {
  if (romote_ip_addr != NULL) {
    set_has_romote_ip_addr();
  } else {
    clear_has_romote_ip_addr();
  }
  romote_ip_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), romote_ip_addr);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.TerminalInfo.romote_ip_addr)
}

// optional bool calibration_status = 8;
inline bool interaction_TerminalInfo::has_calibration_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void interaction_TerminalInfo::set_has_calibration_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void interaction_TerminalInfo::clear_has_calibration_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void interaction_TerminalInfo::clear_calibration_status() {
  calibration_status_ = false;
  clear_has_calibration_status();
}
inline bool interaction_TerminalInfo::calibration_status() const {
  // @@protoc_insertion_point(field_get:LT.interaction.TerminalInfo.calibration_status)
  return calibration_status_;
}
inline void interaction_TerminalInfo::set_calibration_status(bool value) {
  set_has_calibration_status();
  calibration_status_ = value;
  // @@protoc_insertion_point(field_set:LT.interaction.TerminalInfo.calibration_status)
}

// optional string term_config = 9;
inline bool interaction_TerminalInfo::has_term_config() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void interaction_TerminalInfo::set_has_term_config() {
  _has_bits_[0] |= 0x00000080u;
}
inline void interaction_TerminalInfo::clear_has_term_config() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void interaction_TerminalInfo::clear_term_config() {
  term_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_term_config();
}
inline const ::std::string& interaction_TerminalInfo::term_config() const {
  // @@protoc_insertion_point(field_get:LT.interaction.TerminalInfo.term_config)
  return term_config_.GetNoArena();
}
inline void interaction_TerminalInfo::set_term_config(const ::std::string& value) {
  set_has_term_config();
  term_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.TerminalInfo.term_config)
}
#if LANG_CXX11
inline void interaction_TerminalInfo::set_term_config(::std::string&& value) {
  set_has_term_config();
  term_config_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.TerminalInfo.term_config)
}
#endif
inline void interaction_TerminalInfo::set_term_config(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_term_config();
  term_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.TerminalInfo.term_config)
}
inline void interaction_TerminalInfo::set_term_config(const char* value, size_t size) {
  set_has_term_config();
  term_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.TerminalInfo.term_config)
}
inline ::std::string* interaction_TerminalInfo::mutable_term_config() {
  set_has_term_config();
  // @@protoc_insertion_point(field_mutable:LT.interaction.TerminalInfo.term_config)
  return term_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_TerminalInfo::release_term_config() {
  // @@protoc_insertion_point(field_release:LT.interaction.TerminalInfo.term_config)
  clear_has_term_config();
  return term_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_TerminalInfo::set_allocated_term_config(::std::string* term_config) {
  if (term_config != NULL) {
    set_has_term_config();
  } else {
    clear_has_term_config();
  }
  term_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), term_config);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.TerminalInfo.term_config)
}

// -------------------------------------------------------------------

// interaction_BaseStationInfo

// required string hostname = 1;
inline bool interaction_BaseStationInfo::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void interaction_BaseStationInfo::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void interaction_BaseStationInfo::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void interaction_BaseStationInfo::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
inline const ::std::string& interaction_BaseStationInfo::hostname() const {
  // @@protoc_insertion_point(field_get:LT.interaction.BaseStationInfo.hostname)
  return hostname_.GetNoArena();
}
inline void interaction_BaseStationInfo::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.BaseStationInfo.hostname)
}
#if LANG_CXX11
inline void interaction_BaseStationInfo::set_hostname(::std::string&& value) {
  set_has_hostname();
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.BaseStationInfo.hostname)
}
#endif
inline void interaction_BaseStationInfo::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.BaseStationInfo.hostname)
}
inline void interaction_BaseStationInfo::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.BaseStationInfo.hostname)
}
inline ::std::string* interaction_BaseStationInfo::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:LT.interaction.BaseStationInfo.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_BaseStationInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:LT.interaction.BaseStationInfo.hostname)
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_BaseStationInfo::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.BaseStationInfo.hostname)
}

// required uint32 bs_id = 2;
inline bool interaction_BaseStationInfo::has_bs_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void interaction_BaseStationInfo::set_has_bs_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void interaction_BaseStationInfo::clear_has_bs_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void interaction_BaseStationInfo::clear_bs_id() {
  bs_id_ = 0u;
  clear_has_bs_id();
}
inline ::google::protobuf::uint32 interaction_BaseStationInfo::bs_id() const {
  // @@protoc_insertion_point(field_get:LT.interaction.BaseStationInfo.bs_id)
  return bs_id_;
}
inline void interaction_BaseStationInfo::set_bs_id(::google::protobuf::uint32 value) {
  set_has_bs_id();
  bs_id_ = value;
  // @@protoc_insertion_point(field_set:LT.interaction.BaseStationInfo.bs_id)
}

// required uint32 ingroup_addr = 3;
inline bool interaction_BaseStationInfo::has_ingroup_addr() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void interaction_BaseStationInfo::set_has_ingroup_addr() {
  _has_bits_[0] |= 0x00000040u;
}
inline void interaction_BaseStationInfo::clear_has_ingroup_addr() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void interaction_BaseStationInfo::clear_ingroup_addr() {
  ingroup_addr_ = 0u;
  clear_has_ingroup_addr();
}
inline ::google::protobuf::uint32 interaction_BaseStationInfo::ingroup_addr() const {
  // @@protoc_insertion_point(field_get:LT.interaction.BaseStationInfo.ingroup_addr)
  return ingroup_addr_;
}
inline void interaction_BaseStationInfo::set_ingroup_addr(::google::protobuf::uint32 value) {
  set_has_ingroup_addr();
  ingroup_addr_ = value;
  // @@protoc_insertion_point(field_set:LT.interaction.BaseStationInfo.ingroup_addr)
}

// optional string bs_freq = 4;
inline bool interaction_BaseStationInfo::has_bs_freq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void interaction_BaseStationInfo::set_has_bs_freq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void interaction_BaseStationInfo::clear_has_bs_freq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void interaction_BaseStationInfo::clear_bs_freq() {
  bs_freq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bs_freq();
}
inline const ::std::string& interaction_BaseStationInfo::bs_freq() const {
  // @@protoc_insertion_point(field_get:LT.interaction.BaseStationInfo.bs_freq)
  return bs_freq_.GetNoArena();
}
inline void interaction_BaseStationInfo::set_bs_freq(const ::std::string& value) {
  set_has_bs_freq();
  bs_freq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.BaseStationInfo.bs_freq)
}
#if LANG_CXX11
inline void interaction_BaseStationInfo::set_bs_freq(::std::string&& value) {
  set_has_bs_freq();
  bs_freq_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.BaseStationInfo.bs_freq)
}
#endif
inline void interaction_BaseStationInfo::set_bs_freq(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bs_freq();
  bs_freq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.BaseStationInfo.bs_freq)
}
inline void interaction_BaseStationInfo::set_bs_freq(const char* value, size_t size) {
  set_has_bs_freq();
  bs_freq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.BaseStationInfo.bs_freq)
}
inline ::std::string* interaction_BaseStationInfo::mutable_bs_freq() {
  set_has_bs_freq();
  // @@protoc_insertion_point(field_mutable:LT.interaction.BaseStationInfo.bs_freq)
  return bs_freq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_BaseStationInfo::release_bs_freq() {
  // @@protoc_insertion_point(field_release:LT.interaction.BaseStationInfo.bs_freq)
  clear_has_bs_freq();
  return bs_freq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_BaseStationInfo::set_allocated_bs_freq(::std::string* bs_freq) {
  if (bs_freq != NULL) {
    set_has_bs_freq();
  } else {
    clear_has_bs_freq();
  }
  bs_freq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bs_freq);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.BaseStationInfo.bs_freq)
}

// optional string bs_location = 5;
inline bool interaction_BaseStationInfo::has_bs_location() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void interaction_BaseStationInfo::set_has_bs_location() {
  _has_bits_[0] |= 0x00000004u;
}
inline void interaction_BaseStationInfo::clear_has_bs_location() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void interaction_BaseStationInfo::clear_bs_location() {
  bs_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bs_location();
}
inline const ::std::string& interaction_BaseStationInfo::bs_location() const {
  // @@protoc_insertion_point(field_get:LT.interaction.BaseStationInfo.bs_location)
  return bs_location_.GetNoArena();
}
inline void interaction_BaseStationInfo::set_bs_location(const ::std::string& value) {
  set_has_bs_location();
  bs_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.BaseStationInfo.bs_location)
}
#if LANG_CXX11
inline void interaction_BaseStationInfo::set_bs_location(::std::string&& value) {
  set_has_bs_location();
  bs_location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.BaseStationInfo.bs_location)
}
#endif
inline void interaction_BaseStationInfo::set_bs_location(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bs_location();
  bs_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.BaseStationInfo.bs_location)
}
inline void interaction_BaseStationInfo::set_bs_location(const char* value, size_t size) {
  set_has_bs_location();
  bs_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.BaseStationInfo.bs_location)
}
inline ::std::string* interaction_BaseStationInfo::mutable_bs_location() {
  set_has_bs_location();
  // @@protoc_insertion_point(field_mutable:LT.interaction.BaseStationInfo.bs_location)
  return bs_location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_BaseStationInfo::release_bs_location() {
  // @@protoc_insertion_point(field_release:LT.interaction.BaseStationInfo.bs_location)
  clear_has_bs_location();
  return bs_location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_BaseStationInfo::set_allocated_bs_location(::std::string* bs_location) {
  if (bs_location != NULL) {
    set_has_bs_location();
  } else {
    clear_has_bs_location();
  }
  bs_location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bs_location);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.BaseStationInfo.bs_location)
}

// optional string bs_orientation = 6;
inline bool interaction_BaseStationInfo::has_bs_orientation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void interaction_BaseStationInfo::set_has_bs_orientation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void interaction_BaseStationInfo::clear_has_bs_orientation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void interaction_BaseStationInfo::clear_bs_orientation() {
  bs_orientation_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bs_orientation();
}
inline const ::std::string& interaction_BaseStationInfo::bs_orientation() const {
  // @@protoc_insertion_point(field_get:LT.interaction.BaseStationInfo.bs_orientation)
  return bs_orientation_.GetNoArena();
}
inline void interaction_BaseStationInfo::set_bs_orientation(const ::std::string& value) {
  set_has_bs_orientation();
  bs_orientation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.BaseStationInfo.bs_orientation)
}
#if LANG_CXX11
inline void interaction_BaseStationInfo::set_bs_orientation(::std::string&& value) {
  set_has_bs_orientation();
  bs_orientation_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.BaseStationInfo.bs_orientation)
}
#endif
inline void interaction_BaseStationInfo::set_bs_orientation(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_bs_orientation();
  bs_orientation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.BaseStationInfo.bs_orientation)
}
inline void interaction_BaseStationInfo::set_bs_orientation(const char* value, size_t size) {
  set_has_bs_orientation();
  bs_orientation_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.BaseStationInfo.bs_orientation)
}
inline ::std::string* interaction_BaseStationInfo::mutable_bs_orientation() {
  set_has_bs_orientation();
  // @@protoc_insertion_point(field_mutable:LT.interaction.BaseStationInfo.bs_orientation)
  return bs_orientation_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_BaseStationInfo::release_bs_orientation() {
  // @@protoc_insertion_point(field_release:LT.interaction.BaseStationInfo.bs_orientation)
  clear_has_bs_orientation();
  return bs_orientation_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_BaseStationInfo::set_allocated_bs_orientation(::std::string* bs_orientation) {
  if (bs_orientation != NULL) {
    set_has_bs_orientation();
  } else {
    clear_has_bs_orientation();
  }
  bs_orientation_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bs_orientation);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.BaseStationInfo.bs_orientation)
}

// optional bool led_status = 7;
inline bool interaction_BaseStationInfo::has_led_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void interaction_BaseStationInfo::set_has_led_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void interaction_BaseStationInfo::clear_has_led_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void interaction_BaseStationInfo::clear_led_status() {
  led_status_ = false;
  clear_has_led_status();
}
inline bool interaction_BaseStationInfo::led_status() const {
  // @@protoc_insertion_point(field_get:LT.interaction.BaseStationInfo.led_status)
  return led_status_;
}
inline void interaction_BaseStationInfo::set_led_status(bool value) {
  set_has_led_status();
  led_status_ = value;
  // @@protoc_insertion_point(field_set:LT.interaction.BaseStationInfo.led_status)
}

// optional bool motor_status = 8;
inline bool interaction_BaseStationInfo::has_motor_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void interaction_BaseStationInfo::set_has_motor_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void interaction_BaseStationInfo::clear_has_motor_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void interaction_BaseStationInfo::clear_motor_status() {
  motor_status_ = false;
  clear_has_motor_status();
}
inline bool interaction_BaseStationInfo::motor_status() const {
  // @@protoc_insertion_point(field_get:LT.interaction.BaseStationInfo.motor_status)
  return motor_status_;
}
inline void interaction_BaseStationInfo::set_motor_status(bool value) {
  set_has_motor_status();
  motor_status_ = value;
  // @@protoc_insertion_point(field_set:LT.interaction.BaseStationInfo.motor_status)
}

// optional string motor_speed = 9;
inline bool interaction_BaseStationInfo::has_motor_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void interaction_BaseStationInfo::set_has_motor_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void interaction_BaseStationInfo::clear_has_motor_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void interaction_BaseStationInfo::clear_motor_speed() {
  motor_speed_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_motor_speed();
}
inline const ::std::string& interaction_BaseStationInfo::motor_speed() const {
  // @@protoc_insertion_point(field_get:LT.interaction.BaseStationInfo.motor_speed)
  return motor_speed_.GetNoArena();
}
inline void interaction_BaseStationInfo::set_motor_speed(const ::std::string& value) {
  set_has_motor_speed();
  motor_speed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.BaseStationInfo.motor_speed)
}
#if LANG_CXX11
inline void interaction_BaseStationInfo::set_motor_speed(::std::string&& value) {
  set_has_motor_speed();
  motor_speed_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.BaseStationInfo.motor_speed)
}
#endif
inline void interaction_BaseStationInfo::set_motor_speed(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_motor_speed();
  motor_speed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.BaseStationInfo.motor_speed)
}
inline void interaction_BaseStationInfo::set_motor_speed(const char* value, size_t size) {
  set_has_motor_speed();
  motor_speed_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.BaseStationInfo.motor_speed)
}
inline ::std::string* interaction_BaseStationInfo::mutable_motor_speed() {
  set_has_motor_speed();
  // @@protoc_insertion_point(field_mutable:LT.interaction.BaseStationInfo.motor_speed)
  return motor_speed_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_BaseStationInfo::release_motor_speed() {
  // @@protoc_insertion_point(field_release:LT.interaction.BaseStationInfo.motor_speed)
  clear_has_motor_speed();
  return motor_speed_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_BaseStationInfo::set_allocated_motor_speed(::std::string* motor_speed) {
  if (motor_speed != NULL) {
    set_has_motor_speed();
  } else {
    clear_has_motor_speed();
  }
  motor_speed_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), motor_speed);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.BaseStationInfo.motor_speed)
}

// -------------------------------------------------------------------

// interaction_BaseCommandInfo

// required .LT.interaction.BaseCommandInfo.BaseCommandId cmd_id = 1;
inline bool interaction_BaseCommandInfo::has_cmd_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void interaction_BaseCommandInfo::set_has_cmd_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void interaction_BaseCommandInfo::clear_has_cmd_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void interaction_BaseCommandInfo::clear_cmd_id() {
  cmd_id_ = 0;
  clear_has_cmd_id();
}
inline ::LT::interaction_BaseCommandInfo_BaseCommandId interaction_BaseCommandInfo::cmd_id() const {
  // @@protoc_insertion_point(field_get:LT.interaction.BaseCommandInfo.cmd_id)
  return static_cast< ::LT::interaction_BaseCommandInfo_BaseCommandId >(cmd_id_);
}
inline void interaction_BaseCommandInfo::set_cmd_id(::LT::interaction_BaseCommandInfo_BaseCommandId value) {
  assert(::LT::interaction_BaseCommandInfo_BaseCommandId_IsValid(value));
  set_has_cmd_id();
  cmd_id_ = value;
  // @@protoc_insertion_point(field_set:LT.interaction.BaseCommandInfo.cmd_id)
}

// optional string cmd_arg1 = 2;
inline bool interaction_BaseCommandInfo::has_cmd_arg1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void interaction_BaseCommandInfo::set_has_cmd_arg1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void interaction_BaseCommandInfo::clear_has_cmd_arg1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void interaction_BaseCommandInfo::clear_cmd_arg1() {
  cmd_arg1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd_arg1();
}
inline const ::std::string& interaction_BaseCommandInfo::cmd_arg1() const {
  // @@protoc_insertion_point(field_get:LT.interaction.BaseCommandInfo.cmd_arg1)
  return cmd_arg1_.GetNoArena();
}
inline void interaction_BaseCommandInfo::set_cmd_arg1(const ::std::string& value) {
  set_has_cmd_arg1();
  cmd_arg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.BaseCommandInfo.cmd_arg1)
}
#if LANG_CXX11
inline void interaction_BaseCommandInfo::set_cmd_arg1(::std::string&& value) {
  set_has_cmd_arg1();
  cmd_arg1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.BaseCommandInfo.cmd_arg1)
}
#endif
inline void interaction_BaseCommandInfo::set_cmd_arg1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cmd_arg1();
  cmd_arg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.BaseCommandInfo.cmd_arg1)
}
inline void interaction_BaseCommandInfo::set_cmd_arg1(const char* value, size_t size) {
  set_has_cmd_arg1();
  cmd_arg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.BaseCommandInfo.cmd_arg1)
}
inline ::std::string* interaction_BaseCommandInfo::mutable_cmd_arg1() {
  set_has_cmd_arg1();
  // @@protoc_insertion_point(field_mutable:LT.interaction.BaseCommandInfo.cmd_arg1)
  return cmd_arg1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_BaseCommandInfo::release_cmd_arg1() {
  // @@protoc_insertion_point(field_release:LT.interaction.BaseCommandInfo.cmd_arg1)
  clear_has_cmd_arg1();
  return cmd_arg1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_BaseCommandInfo::set_allocated_cmd_arg1(::std::string* cmd_arg1) {
  if (cmd_arg1 != NULL) {
    set_has_cmd_arg1();
  } else {
    clear_has_cmd_arg1();
  }
  cmd_arg1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd_arg1);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.BaseCommandInfo.cmd_arg1)
}

// optional string cmd_arg2 = 3;
inline bool interaction_BaseCommandInfo::has_cmd_arg2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void interaction_BaseCommandInfo::set_has_cmd_arg2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void interaction_BaseCommandInfo::clear_has_cmd_arg2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void interaction_BaseCommandInfo::clear_cmd_arg2() {
  cmd_arg2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd_arg2();
}
inline const ::std::string& interaction_BaseCommandInfo::cmd_arg2() const {
  // @@protoc_insertion_point(field_get:LT.interaction.BaseCommandInfo.cmd_arg2)
  return cmd_arg2_.GetNoArena();
}
inline void interaction_BaseCommandInfo::set_cmd_arg2(const ::std::string& value) {
  set_has_cmd_arg2();
  cmd_arg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.BaseCommandInfo.cmd_arg2)
}
#if LANG_CXX11
inline void interaction_BaseCommandInfo::set_cmd_arg2(::std::string&& value) {
  set_has_cmd_arg2();
  cmd_arg2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.BaseCommandInfo.cmd_arg2)
}
#endif
inline void interaction_BaseCommandInfo::set_cmd_arg2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cmd_arg2();
  cmd_arg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.BaseCommandInfo.cmd_arg2)
}
inline void interaction_BaseCommandInfo::set_cmd_arg2(const char* value, size_t size) {
  set_has_cmd_arg2();
  cmd_arg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.BaseCommandInfo.cmd_arg2)
}
inline ::std::string* interaction_BaseCommandInfo::mutable_cmd_arg2() {
  set_has_cmd_arg2();
  // @@protoc_insertion_point(field_mutable:LT.interaction.BaseCommandInfo.cmd_arg2)
  return cmd_arg2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_BaseCommandInfo::release_cmd_arg2() {
  // @@protoc_insertion_point(field_release:LT.interaction.BaseCommandInfo.cmd_arg2)
  clear_has_cmd_arg2();
  return cmd_arg2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_BaseCommandInfo::set_allocated_cmd_arg2(::std::string* cmd_arg2) {
  if (cmd_arg2 != NULL) {
    set_has_cmd_arg2();
  } else {
    clear_has_cmd_arg2();
  }
  cmd_arg2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd_arg2);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.BaseCommandInfo.cmd_arg2)
}

// optional string cmd_arg3 = 4;
inline bool interaction_BaseCommandInfo::has_cmd_arg3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void interaction_BaseCommandInfo::set_has_cmd_arg3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void interaction_BaseCommandInfo::clear_has_cmd_arg3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void interaction_BaseCommandInfo::clear_cmd_arg3() {
  cmd_arg3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd_arg3();
}
inline const ::std::string& interaction_BaseCommandInfo::cmd_arg3() const {
  // @@protoc_insertion_point(field_get:LT.interaction.BaseCommandInfo.cmd_arg3)
  return cmd_arg3_.GetNoArena();
}
inline void interaction_BaseCommandInfo::set_cmd_arg3(const ::std::string& value) {
  set_has_cmd_arg3();
  cmd_arg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.BaseCommandInfo.cmd_arg3)
}
#if LANG_CXX11
inline void interaction_BaseCommandInfo::set_cmd_arg3(::std::string&& value) {
  set_has_cmd_arg3();
  cmd_arg3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.BaseCommandInfo.cmd_arg3)
}
#endif
inline void interaction_BaseCommandInfo::set_cmd_arg3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cmd_arg3();
  cmd_arg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.BaseCommandInfo.cmd_arg3)
}
inline void interaction_BaseCommandInfo::set_cmd_arg3(const char* value, size_t size) {
  set_has_cmd_arg3();
  cmd_arg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.BaseCommandInfo.cmd_arg3)
}
inline ::std::string* interaction_BaseCommandInfo::mutable_cmd_arg3() {
  set_has_cmd_arg3();
  // @@protoc_insertion_point(field_mutable:LT.interaction.BaseCommandInfo.cmd_arg3)
  return cmd_arg3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_BaseCommandInfo::release_cmd_arg3() {
  // @@protoc_insertion_point(field_release:LT.interaction.BaseCommandInfo.cmd_arg3)
  clear_has_cmd_arg3();
  return cmd_arg3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_BaseCommandInfo::set_allocated_cmd_arg3(::std::string* cmd_arg3) {
  if (cmd_arg3 != NULL) {
    set_has_cmd_arg3();
  } else {
    clear_has_cmd_arg3();
  }
  cmd_arg3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd_arg3);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.BaseCommandInfo.cmd_arg3)
}

// -------------------------------------------------------------------

// interaction_TermCommandInfo

// required .LT.interaction.TermCommandInfo.TermCommandId cmd_id = 1;
inline bool interaction_TermCommandInfo::has_cmd_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void interaction_TermCommandInfo::set_has_cmd_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void interaction_TermCommandInfo::clear_has_cmd_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void interaction_TermCommandInfo::clear_cmd_id() {
  cmd_id_ = 0;
  clear_has_cmd_id();
}
inline ::LT::interaction_TermCommandInfo_TermCommandId interaction_TermCommandInfo::cmd_id() const {
  // @@protoc_insertion_point(field_get:LT.interaction.TermCommandInfo.cmd_id)
  return static_cast< ::LT::interaction_TermCommandInfo_TermCommandId >(cmd_id_);
}
inline void interaction_TermCommandInfo::set_cmd_id(::LT::interaction_TermCommandInfo_TermCommandId value) {
  assert(::LT::interaction_TermCommandInfo_TermCommandId_IsValid(value));
  set_has_cmd_id();
  cmd_id_ = value;
  // @@protoc_insertion_point(field_set:LT.interaction.TermCommandInfo.cmd_id)
}

// optional string cmd_arg1 = 2;
inline bool interaction_TermCommandInfo::has_cmd_arg1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void interaction_TermCommandInfo::set_has_cmd_arg1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void interaction_TermCommandInfo::clear_has_cmd_arg1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void interaction_TermCommandInfo::clear_cmd_arg1() {
  cmd_arg1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd_arg1();
}
inline const ::std::string& interaction_TermCommandInfo::cmd_arg1() const {
  // @@protoc_insertion_point(field_get:LT.interaction.TermCommandInfo.cmd_arg1)
  return cmd_arg1_.GetNoArena();
}
inline void interaction_TermCommandInfo::set_cmd_arg1(const ::std::string& value) {
  set_has_cmd_arg1();
  cmd_arg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.TermCommandInfo.cmd_arg1)
}
#if LANG_CXX11
inline void interaction_TermCommandInfo::set_cmd_arg1(::std::string&& value) {
  set_has_cmd_arg1();
  cmd_arg1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.TermCommandInfo.cmd_arg1)
}
#endif
inline void interaction_TermCommandInfo::set_cmd_arg1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cmd_arg1();
  cmd_arg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.TermCommandInfo.cmd_arg1)
}
inline void interaction_TermCommandInfo::set_cmd_arg1(const char* value, size_t size) {
  set_has_cmd_arg1();
  cmd_arg1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.TermCommandInfo.cmd_arg1)
}
inline ::std::string* interaction_TermCommandInfo::mutable_cmd_arg1() {
  set_has_cmd_arg1();
  // @@protoc_insertion_point(field_mutable:LT.interaction.TermCommandInfo.cmd_arg1)
  return cmd_arg1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_TermCommandInfo::release_cmd_arg1() {
  // @@protoc_insertion_point(field_release:LT.interaction.TermCommandInfo.cmd_arg1)
  clear_has_cmd_arg1();
  return cmd_arg1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_TermCommandInfo::set_allocated_cmd_arg1(::std::string* cmd_arg1) {
  if (cmd_arg1 != NULL) {
    set_has_cmd_arg1();
  } else {
    clear_has_cmd_arg1();
  }
  cmd_arg1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd_arg1);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.TermCommandInfo.cmd_arg1)
}

// optional string cmd_arg2 = 3;
inline bool interaction_TermCommandInfo::has_cmd_arg2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void interaction_TermCommandInfo::set_has_cmd_arg2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void interaction_TermCommandInfo::clear_has_cmd_arg2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void interaction_TermCommandInfo::clear_cmd_arg2() {
  cmd_arg2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd_arg2();
}
inline const ::std::string& interaction_TermCommandInfo::cmd_arg2() const {
  // @@protoc_insertion_point(field_get:LT.interaction.TermCommandInfo.cmd_arg2)
  return cmd_arg2_.GetNoArena();
}
inline void interaction_TermCommandInfo::set_cmd_arg2(const ::std::string& value) {
  set_has_cmd_arg2();
  cmd_arg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.TermCommandInfo.cmd_arg2)
}
#if LANG_CXX11
inline void interaction_TermCommandInfo::set_cmd_arg2(::std::string&& value) {
  set_has_cmd_arg2();
  cmd_arg2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.TermCommandInfo.cmd_arg2)
}
#endif
inline void interaction_TermCommandInfo::set_cmd_arg2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cmd_arg2();
  cmd_arg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.TermCommandInfo.cmd_arg2)
}
inline void interaction_TermCommandInfo::set_cmd_arg2(const char* value, size_t size) {
  set_has_cmd_arg2();
  cmd_arg2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.TermCommandInfo.cmd_arg2)
}
inline ::std::string* interaction_TermCommandInfo::mutable_cmd_arg2() {
  set_has_cmd_arg2();
  // @@protoc_insertion_point(field_mutable:LT.interaction.TermCommandInfo.cmd_arg2)
  return cmd_arg2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_TermCommandInfo::release_cmd_arg2() {
  // @@protoc_insertion_point(field_release:LT.interaction.TermCommandInfo.cmd_arg2)
  clear_has_cmd_arg2();
  return cmd_arg2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_TermCommandInfo::set_allocated_cmd_arg2(::std::string* cmd_arg2) {
  if (cmd_arg2 != NULL) {
    set_has_cmd_arg2();
  } else {
    clear_has_cmd_arg2();
  }
  cmd_arg2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd_arg2);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.TermCommandInfo.cmd_arg2)
}

// optional string cmd_arg3 = 4;
inline bool interaction_TermCommandInfo::has_cmd_arg3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void interaction_TermCommandInfo::set_has_cmd_arg3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void interaction_TermCommandInfo::clear_has_cmd_arg3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void interaction_TermCommandInfo::clear_cmd_arg3() {
  cmd_arg3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd_arg3();
}
inline const ::std::string& interaction_TermCommandInfo::cmd_arg3() const {
  // @@protoc_insertion_point(field_get:LT.interaction.TermCommandInfo.cmd_arg3)
  return cmd_arg3_.GetNoArena();
}
inline void interaction_TermCommandInfo::set_cmd_arg3(const ::std::string& value) {
  set_has_cmd_arg3();
  cmd_arg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.TermCommandInfo.cmd_arg3)
}
#if LANG_CXX11
inline void interaction_TermCommandInfo::set_cmd_arg3(::std::string&& value) {
  set_has_cmd_arg3();
  cmd_arg3_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.TermCommandInfo.cmd_arg3)
}
#endif
inline void interaction_TermCommandInfo::set_cmd_arg3(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cmd_arg3();
  cmd_arg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.TermCommandInfo.cmd_arg3)
}
inline void interaction_TermCommandInfo::set_cmd_arg3(const char* value, size_t size) {
  set_has_cmd_arg3();
  cmd_arg3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.TermCommandInfo.cmd_arg3)
}
inline ::std::string* interaction_TermCommandInfo::mutable_cmd_arg3() {
  set_has_cmd_arg3();
  // @@protoc_insertion_point(field_mutable:LT.interaction.TermCommandInfo.cmd_arg3)
  return cmd_arg3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction_TermCommandInfo::release_cmd_arg3() {
  // @@protoc_insertion_point(field_release:LT.interaction.TermCommandInfo.cmd_arg3)
  clear_has_cmd_arg3();
  return cmd_arg3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction_TermCommandInfo::set_allocated_cmd_arg3(::std::string* cmd_arg3) {
  if (cmd_arg3 != NULL) {
    set_has_cmd_arg3();
  } else {
    clear_has_cmd_arg3();
  }
  cmd_arg3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd_arg3);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.TermCommandInfo.cmd_arg3)
}

// -------------------------------------------------------------------

// interaction

// required int32 msg_id = 1;
inline bool interaction::has_msg_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void interaction::set_has_msg_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void interaction::clear_has_msg_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void interaction::clear_msg_id() {
  msg_id_ = 0;
  clear_has_msg_id();
}
inline ::google::protobuf::int32 interaction::msg_id() const {
  // @@protoc_insertion_point(field_get:LT.interaction.msg_id)
  return msg_id_;
}
inline void interaction::set_msg_id(::google::protobuf::int32 value) {
  set_has_msg_id();
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:LT.interaction.msg_id)
}

// optional .LT.interaction.TerminalInfo terminal_info = 2;
inline bool interaction::has_terminal_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void interaction::set_has_terminal_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void interaction::clear_has_terminal_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void interaction::clear_terminal_info() {
  if (terminal_info_ != NULL) terminal_info_->Clear();
  clear_has_terminal_info();
}
inline const ::LT::interaction_TerminalInfo& interaction::terminal_info() const {
  const ::LT::interaction_TerminalInfo* p = terminal_info_;
  // @@protoc_insertion_point(field_get:LT.interaction.terminal_info)
  return p != NULL ? *p : *reinterpret_cast<const ::LT::interaction_TerminalInfo*>(
      &::LT::_interaction_TerminalInfo_default_instance_);
}
inline ::LT::interaction_TerminalInfo* interaction::release_terminal_info() {
  // @@protoc_insertion_point(field_release:LT.interaction.terminal_info)
  clear_has_terminal_info();
  ::LT::interaction_TerminalInfo* temp = terminal_info_;
  terminal_info_ = NULL;
  return temp;
}
inline ::LT::interaction_TerminalInfo* interaction::mutable_terminal_info() {
  set_has_terminal_info();
  if (terminal_info_ == NULL) {
    terminal_info_ = new ::LT::interaction_TerminalInfo;
  }
  // @@protoc_insertion_point(field_mutable:LT.interaction.terminal_info)
  return terminal_info_;
}
inline void interaction::set_allocated_terminal_info(::LT::interaction_TerminalInfo* terminal_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete terminal_info_;
  }
  if (terminal_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      terminal_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, terminal_info, submessage_arena);
    }
    set_has_terminal_info();
  } else {
    clear_has_terminal_info();
  }
  terminal_info_ = terminal_info;
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.terminal_info)
}

// optional .LT.interaction.TermCommandInfo terminal_cmd_info = 3;
inline bool interaction::has_terminal_cmd_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void interaction::set_has_terminal_cmd_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void interaction::clear_has_terminal_cmd_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void interaction::clear_terminal_cmd_info() {
  if (terminal_cmd_info_ != NULL) terminal_cmd_info_->Clear();
  clear_has_terminal_cmd_info();
}
inline const ::LT::interaction_TermCommandInfo& interaction::terminal_cmd_info() const {
  const ::LT::interaction_TermCommandInfo* p = terminal_cmd_info_;
  // @@protoc_insertion_point(field_get:LT.interaction.terminal_cmd_info)
  return p != NULL ? *p : *reinterpret_cast<const ::LT::interaction_TermCommandInfo*>(
      &::LT::_interaction_TermCommandInfo_default_instance_);
}
inline ::LT::interaction_TermCommandInfo* interaction::release_terminal_cmd_info() {
  // @@protoc_insertion_point(field_release:LT.interaction.terminal_cmd_info)
  clear_has_terminal_cmd_info();
  ::LT::interaction_TermCommandInfo* temp = terminal_cmd_info_;
  terminal_cmd_info_ = NULL;
  return temp;
}
inline ::LT::interaction_TermCommandInfo* interaction::mutable_terminal_cmd_info() {
  set_has_terminal_cmd_info();
  if (terminal_cmd_info_ == NULL) {
    terminal_cmd_info_ = new ::LT::interaction_TermCommandInfo;
  }
  // @@protoc_insertion_point(field_mutable:LT.interaction.terminal_cmd_info)
  return terminal_cmd_info_;
}
inline void interaction::set_allocated_terminal_cmd_info(::LT::interaction_TermCommandInfo* terminal_cmd_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete terminal_cmd_info_;
  }
  if (terminal_cmd_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      terminal_cmd_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, terminal_cmd_info, submessage_arena);
    }
    set_has_terminal_cmd_info();
  } else {
    clear_has_terminal_cmd_info();
  }
  terminal_cmd_info_ = terminal_cmd_info;
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.terminal_cmd_info)
}

// optional bool terminal_cmd_result = 4;
inline bool interaction::has_terminal_cmd_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void interaction::set_has_terminal_cmd_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void interaction::clear_has_terminal_cmd_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void interaction::clear_terminal_cmd_result() {
  terminal_cmd_result_ = false;
  clear_has_terminal_cmd_result();
}
inline bool interaction::terminal_cmd_result() const {
  // @@protoc_insertion_point(field_get:LT.interaction.terminal_cmd_result)
  return terminal_cmd_result_;
}
inline void interaction::set_terminal_cmd_result(bool value) {
  set_has_terminal_cmd_result();
  terminal_cmd_result_ = value;
  // @@protoc_insertion_point(field_set:LT.interaction.terminal_cmd_result)
}

// optional .LT.interaction.BaseStationInfo base_station_info = 5;
inline bool interaction::has_base_station_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void interaction::set_has_base_station_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void interaction::clear_has_base_station_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void interaction::clear_base_station_info() {
  if (base_station_info_ != NULL) base_station_info_->Clear();
  clear_has_base_station_info();
}
inline const ::LT::interaction_BaseStationInfo& interaction::base_station_info() const {
  const ::LT::interaction_BaseStationInfo* p = base_station_info_;
  // @@protoc_insertion_point(field_get:LT.interaction.base_station_info)
  return p != NULL ? *p : *reinterpret_cast<const ::LT::interaction_BaseStationInfo*>(
      &::LT::_interaction_BaseStationInfo_default_instance_);
}
inline ::LT::interaction_BaseStationInfo* interaction::release_base_station_info() {
  // @@protoc_insertion_point(field_release:LT.interaction.base_station_info)
  clear_has_base_station_info();
  ::LT::interaction_BaseStationInfo* temp = base_station_info_;
  base_station_info_ = NULL;
  return temp;
}
inline ::LT::interaction_BaseStationInfo* interaction::mutable_base_station_info() {
  set_has_base_station_info();
  if (base_station_info_ == NULL) {
    base_station_info_ = new ::LT::interaction_BaseStationInfo;
  }
  // @@protoc_insertion_point(field_mutable:LT.interaction.base_station_info)
  return base_station_info_;
}
inline void interaction::set_allocated_base_station_info(::LT::interaction_BaseStationInfo* base_station_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_station_info_;
  }
  if (base_station_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base_station_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_station_info, submessage_arena);
    }
    set_has_base_station_info();
  } else {
    clear_has_base_station_info();
  }
  base_station_info_ = base_station_info;
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.base_station_info)
}

// optional .LT.interaction.BaseCommandInfo base_cmd_info = 6;
inline bool interaction::has_base_cmd_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void interaction::set_has_base_cmd_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void interaction::clear_has_base_cmd_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void interaction::clear_base_cmd_info() {
  if (base_cmd_info_ != NULL) base_cmd_info_->Clear();
  clear_has_base_cmd_info();
}
inline const ::LT::interaction_BaseCommandInfo& interaction::base_cmd_info() const {
  const ::LT::interaction_BaseCommandInfo* p = base_cmd_info_;
  // @@protoc_insertion_point(field_get:LT.interaction.base_cmd_info)
  return p != NULL ? *p : *reinterpret_cast<const ::LT::interaction_BaseCommandInfo*>(
      &::LT::_interaction_BaseCommandInfo_default_instance_);
}
inline ::LT::interaction_BaseCommandInfo* interaction::release_base_cmd_info() {
  // @@protoc_insertion_point(field_release:LT.interaction.base_cmd_info)
  clear_has_base_cmd_info();
  ::LT::interaction_BaseCommandInfo* temp = base_cmd_info_;
  base_cmd_info_ = NULL;
  return temp;
}
inline ::LT::interaction_BaseCommandInfo* interaction::mutable_base_cmd_info() {
  set_has_base_cmd_info();
  if (base_cmd_info_ == NULL) {
    base_cmd_info_ = new ::LT::interaction_BaseCommandInfo;
  }
  // @@protoc_insertion_point(field_mutable:LT.interaction.base_cmd_info)
  return base_cmd_info_;
}
inline void interaction::set_allocated_base_cmd_info(::LT::interaction_BaseCommandInfo* base_cmd_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete base_cmd_info_;
  }
  if (base_cmd_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      base_cmd_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, base_cmd_info, submessage_arena);
    }
    set_has_base_cmd_info();
  } else {
    clear_has_base_cmd_info();
  }
  base_cmd_info_ = base_cmd_info;
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.base_cmd_info)
}

// optional bool base_cmd_result = 7;
inline bool interaction::has_base_cmd_result() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void interaction::set_has_base_cmd_result() {
  _has_bits_[0] |= 0x00000080u;
}
inline void interaction::clear_has_base_cmd_result() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void interaction::clear_base_cmd_result() {
  base_cmd_result_ = false;
  clear_has_base_cmd_result();
}
inline bool interaction::base_cmd_result() const {
  // @@protoc_insertion_point(field_get:LT.interaction.base_cmd_result)
  return base_cmd_result_;
}
inline void interaction::set_base_cmd_result(bool value) {
  set_has_base_cmd_result();
  base_cmd_result_ = value;
  // @@protoc_insertion_point(field_set:LT.interaction.base_cmd_result)
}

// optional string config_file = 9;
inline bool interaction::has_config_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void interaction::set_has_config_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void interaction::clear_has_config_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void interaction::clear_config_file() {
  config_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_config_file();
}
inline const ::std::string& interaction::config_file() const {
  // @@protoc_insertion_point(field_get:LT.interaction.config_file)
  return config_file_.GetNoArena();
}
inline void interaction::set_config_file(const ::std::string& value) {
  set_has_config_file();
  config_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LT.interaction.config_file)
}
#if LANG_CXX11
inline void interaction::set_config_file(::std::string&& value) {
  set_has_config_file();
  config_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LT.interaction.config_file)
}
#endif
inline void interaction::set_config_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_config_file();
  config_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LT.interaction.config_file)
}
inline void interaction::set_config_file(const char* value, size_t size) {
  set_has_config_file();
  config_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LT.interaction.config_file)
}
inline ::std::string* interaction::mutable_config_file() {
  set_has_config_file();
  // @@protoc_insertion_point(field_mutable:LT.interaction.config_file)
  return config_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* interaction::release_config_file() {
  // @@protoc_insertion_point(field_release:LT.interaction.config_file)
  clear_has_config_file();
  return config_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void interaction::set_allocated_config_file(::std::string* config_file) {
  if (config_file != NULL) {
    set_has_config_file();
  } else {
    clear_has_config_file();
  }
  config_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), config_file);
  // @@protoc_insertion_point(field_set_allocated:LT.interaction.config_file)
}

// repeated .LT.interaction.TerminalInfo terminal_info_list = 10;
inline int interaction::terminal_info_list_size() const {
  return terminal_info_list_.size();
}
inline void interaction::clear_terminal_info_list() {
  terminal_info_list_.Clear();
}
inline const ::LT::interaction_TerminalInfo& interaction::terminal_info_list(int index) const {
  // @@protoc_insertion_point(field_get:LT.interaction.terminal_info_list)
  return terminal_info_list_.Get(index);
}
inline ::LT::interaction_TerminalInfo* interaction::mutable_terminal_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:LT.interaction.terminal_info_list)
  return terminal_info_list_.Mutable(index);
}
inline ::LT::interaction_TerminalInfo* interaction::add_terminal_info_list() {
  // @@protoc_insertion_point(field_add:LT.interaction.terminal_info_list)
  return terminal_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::LT::interaction_TerminalInfo >*
interaction::mutable_terminal_info_list() {
  // @@protoc_insertion_point(field_mutable_list:LT.interaction.terminal_info_list)
  return &terminal_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::LT::interaction_TerminalInfo >&
interaction::terminal_info_list() const {
  // @@protoc_insertion_point(field_list:LT.interaction.terminal_info_list)
  return terminal_info_list_;
}

// repeated .LT.interaction.BaseStationInfo base_station_info_list = 11;
inline int interaction::base_station_info_list_size() const {
  return base_station_info_list_.size();
}
inline void interaction::clear_base_station_info_list() {
  base_station_info_list_.Clear();
}
inline const ::LT::interaction_BaseStationInfo& interaction::base_station_info_list(int index) const {
  // @@protoc_insertion_point(field_get:LT.interaction.base_station_info_list)
  return base_station_info_list_.Get(index);
}
inline ::LT::interaction_BaseStationInfo* interaction::mutable_base_station_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:LT.interaction.base_station_info_list)
  return base_station_info_list_.Mutable(index);
}
inline ::LT::interaction_BaseStationInfo* interaction::add_base_station_info_list() {
  // @@protoc_insertion_point(field_add:LT.interaction.base_station_info_list)
  return base_station_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::LT::interaction_BaseStationInfo >*
interaction::mutable_base_station_info_list() {
  // @@protoc_insertion_point(field_mutable_list:LT.interaction.base_station_info_list)
  return &base_station_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::LT::interaction_BaseStationInfo >&
interaction::base_station_info_list() const {
  // @@protoc_insertion_point(field_list:LT.interaction.base_station_info_list)
  return base_station_info_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LT

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LT::interaction_BaseCommandInfo_BaseCommandId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LT::interaction_BaseCommandInfo_BaseCommandId>() {
  return ::LT::interaction_BaseCommandInfo_BaseCommandId_descriptor();
}
template <> struct is_proto_enum< ::LT::interaction_TermCommandInfo_TermCommandId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LT::interaction_TermCommandInfo_TermCommandId>() {
  return ::LT::interaction_TermCommandInfo_TermCommandId_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LT_2eInteraction_2eproto__INCLUDED
